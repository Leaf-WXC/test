JS属于弱类型语言，即使变量不进行声明，也可以使用。
JS变量声明采用动态声明var,因此在很多条件下会自动进行数据类型隐式转换：

1.四则运算
 加法运算符+是双目运算符，只要其中一个是String类型，表达式的值便是一个String。
 对于其他的四则运算，只有其中一个是Number类型，表达式的值便是一个Number。
 对于非法字符的情况通常会返回NaN：
 '1' * 'a'     // => NaN，这是因为parseInt(a)值为NaN，1 * NaN 还是 NaN

2.判断语句（包括if判断和三目运算符）
 判断的条件表达式会被隐式转换为Boolean类型，其类型会按照boolean转化函数来进行类型转换：
 new Boolean(value);	//构造函数
 Boolean(value);		//转换函数
 参数

 参数 value 由布尔对象存放的值或者要转换成布尔值的值。

 返回值
 
 当作为一个构造函数（带有运算符 new）调用时，Boolean() 将把它的参数转换成一个布尔值，
 并且返回一个包含该值的 Boolean 对象。
 如果作为一个函数（不带有运算符 new）调用时，Boolean() 只将把它的参数转换成一个原始的布尔值，并且返回这个值。
 
 注释：如果省略 value 参数，或者设置为 0、-0、null、""、false、undefined 或 NaN，则该对象设置为 false。
 否则设置为 true（即使 value 参数是字符串 "false"）。

3.比较 
 转换规律为：
 
 1）对象和布尔值比较
 对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字
 [] == true;  //false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false
 
 2）对象和字符串比较
 对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。
 [1,2,3] == '1,2,3' //true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;
 
 3）对象和数字比较
 对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。
 [1] == 1;  //true  对象先转换为字符串再转换为数字，二者再比较 [1] => '1' => 1 所以结果为true
 
 4）字符串和数字比较
 字符串和数字进行比较时，字符串转换成数字，二者再比较。
 '1' == 1 //true
 
 5）字符串和布尔值比较
 字符串和布尔值进行比较时，二者全部转换成数值再比较。
 '1' == true; //true 
 
 6）布尔值和数字比较
 布尔值和数字进行比较时，布尔转换为数字，二者比较。
 true == 1 //true
 总结：对象-->字符串-->数值<--布尔，所有类型最终都转换为数值类型比较.
